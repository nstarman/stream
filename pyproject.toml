[project]
  name = "stream"
  version = "0.1.0"
  description = "Stellar Streams"
  readme = "README.rst"
  requires-python = ">=3.8"
  license = {file = "licenses/LICENSE.rst"}
  keywords = ["stellar streams", "astronomy"]
  authors = [
    {name = "Nathaniel Starkman", email = "n.starkman@mail.utoronto.ca"}
  ]
  maintainers = [
    {name = "Nathaniel Starkman", email = "n.starkman@mail.utoronto.ca"}
  ]
  classifiers = [
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: BSD License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Topic :: Scientific/Engineering :: Astronomy",
    "Topic :: Scientific/Engineering :: Physics",
  ]
  dependencies = [
    "importlib_metadata>=4.4",
    "typing_extensions>=4.2",
    "numpy>=1.18",
    "scipy>1.3",
    "astropy>=5.0",
    "pyerfa",
  ]

[project.optional-dependencies]
  all = [
  ]
  test = [
    "coverage[toml]",
    "pytest",
    "pytest-astropy",
    "tqdm",
  ]
  docs = [
    "graphviz",
    "IPython",
    "jupyter_client",
    "nbsphinx",
    "sphinx",
    "sphinx-astropy",
    "sphinxcontrib.bibtex < 2.0.0",
    "tomlkit",
  ]

[project.urls]
  homepage = "https://github.com/nstarman/stream"
  repository = "https://github.com/nstarman/stream"
  documentation = "https://stellar_stream.readthedocs.io"


[project.entry-points."stream.io.StreamArm.from_format"]
  astropy_table = "stream.io.builtin.table:register_StreamArm_from_format"


[build-system]
  requires = [
    "extension-helpers",
    "setuptools>=45",
    "setuptools_scm>=6.2",
    "oldest-supported-numpy",
    "wheel"
  ]

  build-backend = 'setuptools.build_meta'

[tool.setuptools]
  package-dir = {"" = "src"}

[tool.setuptools_scm]


[tool.autopep8]
  max_line_length = 120
  in-place = true
  recursive = true


[tool.black]
  line-length = 120
  include = '\.pyi?$'
  exclude = '''
  /(
      \.git
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
  )/
  '''


[tool.isort]
  profile = "black"
  multi_line_output = 3
  include_trailing_comma = "True"
  force_grid_wrap = 0
  use_parentheses = "True"
  ensure_newline_before_comments = "True"
  sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
  known_localfolder = "stream"
  known_third_party = ["astropy", "matplotlib", "numpy", "pytest", "scipy", "setuptools"]
  import_heading_stdlib = "STDLIB"
  import_heading_thirdparty = "THIRD PARTY"
  import_heading_localfolder = "LOCAL"


[tool.mypy]
  strict = true
  disallow_untyped_defs = true
  ignore_missing_imports = true
  no_implicit_optional = true
  warn_return_any = true
  warn_redundant_casts = true
  warn_unused_configs = true
  warn_unreachable = true
  files = [
    "src/stream/**/*.py",
  ]
  exclude = [
    'conftest\.py'
  ]

  [[tool.mypy.overrides]]
    module = "*/tests/*"
    ignore_errors = true

  [[tool.mypy.overrides]]
    module = "docs/*"
    ignore_errors = true


[tool.pytest.ini_options]
  testpaths = ["src/stream", "docs"]
  astropy_header = "True"
  doctest_plus = "enabled"
  text_file_format = "rst"
  addopts = "--doctest-rst --ignore-glob=docs/papers_and_presentations/*"
  filterwarnings = [
    # tomlkit
    "ignore:The config value `project' has type `String', defaults to `str'.",
    "ignore:The config value `htmlhelp_basename' has type `String', defaults to `str'.",
  ]

[tool.coverage]

  [[tool.coverage.run]]
    omit = [
      "*/stream/conftest.py",
      "*/stream/*setup_package*",
      "*/stream/tests/*",
      "*/stream/*/tests/*",
      "*/stream/extern/*",
    ]

  [[tool.coverage.report]]
    exclude_lines = [
      # Have to re-enable the standard pragma
      "pragma: no cover",
      # Don't complain about packages we have installed
      "except ImportError",
      # Don't complain if tests don't hit assertions
      "raise AssertionError",
      "raise NotImplementedError",
      # Don't complain about script hooks
      "'def main(.*):'",
      # Ignore branches that don't pertain to this version of Python
      "pragma: py{ignore_python_version}",
      # Don't complain about IPython completion helper
      "def _ipython_key_completions_",
    ]
